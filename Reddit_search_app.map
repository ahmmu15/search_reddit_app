{"version":3,"sources":["redditApi.js","index.js"],"names":["search","searchTerm","searchLimit","sortBy","fetch","then","res","json","data","children","map","catch","console","log","err","searchForm","document","getElementById","searchInput","addEventListener","e","preventDefault","value","querySelector","showMessage","results","output","forEach","image","post","preview","images","source","url","title","trimText","selftext","subreddit","score","innerHTML","msg","className","div","createElement","appendChild","createTextNode","searchContainer","insertBefore","setTimeout","remove","text","limit","shortened","indexOf","substring"],"mappings":"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","file":"Reddit_search_app.map","sourcesContent":["export default {\r\n    search: function(searchTerm, searchLimit, sortBy) {\r\n        //use return to make our function returns a promise => so we can use it\r\n        return fetch(`http://reddit.com/search.json?q=${searchTerm}&${sortBy}&${searchLimit}`)\r\n        .then(res => res.json()) //convert the response to json format\r\n        .then(data => data.data.children.map(data => data.data)) //usin map() to return only the data\r\n\r\n        // in case there's any error\r\n        .catch(err => console.log(err))\r\n    }\r\n}","// importing reddit js file => remeber to keep things in modules\r\nimport reddit from './redditApi'\r\n\r\n\r\nconst searchForm = document.getElementById('search-form')\r\nconst searchInput = document.getElementById('search-input')\r\n\r\n\r\n// listen to form submit\r\nsearchForm.addEventListener('submit', e => {\r\n    e.preventDefault();\r\n\r\n    // get seach term\r\n    const searchTerm = searchInput.value\r\n    \r\n    // get sort button value\r\n    const sortBy = document.querySelector('input[name=\"sortby\"]:checked').value\r\n\r\n    // get the limit option\r\n    const searchLimit = document.getElementById('limit').value\r\n\r\n    // check input\r\n    if (searchTerm === '') {\r\n        // show message\r\n        showMessage('Please add a search term', 'alert-danger') // args => msg & className\r\n    }\r\n\r\n    // clear form on submit\r\n    searchInput.value = ''\r\n\r\n    // search Reddit\r\n    // we imported the file and used the function search() in it\r\n    reddit.search(searchTerm, searchLimit, sortBy).then(results => {\r\n\r\n        console.log(results)\r\n        \r\n\r\n        // output the data to dom\r\n        let output = '<div class=\"card-columns\">'\r\n\r\n        // loop through the results\r\n        results.forEach(post => {\r\n\r\n            // check for post image => if it has one or not\r\n            // if there's post.preview => then go and take out the source\r\n            //if not => then use the imaage in our root folder\r\n            const image = post.preview ? post.preview.images[0].source.url : 'http://www.programwitherik.com/content/images/2016/07/reddit.png'\r\n\r\n            output += `\r\n            <div class=\"card\">\r\n                <img class=\"card-img-top\" src=\"${image}\" alt=\"Card image cap\">\r\n                <div class=\"card-body\">\r\n                <h5 class=\"card-title\">${post.title}</h5>\r\n                <p class=\"card-text\">${trimText(post.selftext, 50)}</p> \r\n                <a href=\"${post.url}\" class=\"btn btn-primary\" target=\"_blank\">Read More</a>\r\n                <hr>\r\n                <span class=\"badge badge-secondary\">Subriddet: ${post.subreddit}</span>\r\n                <span class=\"badge badge-dark\">Score: ${post.score}</span>\r\n                </div>\r\n            </div>\r\n            `\r\n        });\r\n\r\n        // close the div\r\n        output += '</div>'\r\n\r\n        // output the div to the dom\r\n        document.getElementById('results').innerHTML = output\r\n    })\r\n})\r\n\r\n// show message function\r\nfunction showMessage(msg, className) {\r\n    //create a div\r\n    const div = document.createElement('div')\r\n\r\n    // add class to div\r\n    div.className = `alert ${className}`\r\n\r\n    // add the txt\r\n    div.appendChild(document.createTextNode(msg))\r\n\r\n    // get the parent container so we can add the message to it\r\n    const searchContainer = document.getElementById('search-container')\r\n\r\n    // get the other element that we want to add the message before\r\n    const search = document.getElementById('search')\r\n\r\n    // insert the message\r\n    searchContainer.insertBefore(div, search) //insert the div before search element\r\n\r\n    // set time out to hide the message after 3s\r\n    setTimeout(() => document.querySelector('.alert').remove(), 3000)\r\n}\r\n\r\n\r\n// truncate long text => aka. trim the text\r\nfunction trimText(text, limit) {\r\n    const shortened = text.indexOf(' ', limit) //use indexOf() to make sure that we don't cut off words in the middle\r\n\r\n    if(shortened === -1) { //if indexOf() doesnt match the space => it'll return -1\r\n        return text\r\n    }\r\n\r\n    return text.substring(0, shortened)\r\n}"]}